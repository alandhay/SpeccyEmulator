{
  "family": "spectrum-emulator-dev",
  "networkMode": "awsvpc",
  "requiresCompatibilities": ["FARGATE"],
  "cpu": "1024",
  "memory": "2048",
  "executionRoleArn": "arn:aws:iam::043309319786:role/spectrum-emulator-ecs-TaskExecutionRole-wCrluMDhLRXJ",
  "containerDefinitions": [
    {
      "name": "spectrum-emulator",
      "image": "python:3.11-slim",
      "essential": true,
      "portMappings": [
        {
          "containerPort": 8765,
          "protocol": "tcp"
        },
        {
          "containerPort": 8080,
          "protocol": "tcp"
        }
      ],
      "environment": [
        {
          "name": "ENVIRONMENT",
          "value": "dev"
        }
      ],
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "/ecs/spectrum-emulator-dev",
          "awslogs-region": "us-east-1",
          "awslogs-stream-prefix": "ecs"
        }
      },
      "command": [
        "/bin/bash",
        "-c",
        "pip install websockets aiohttp && python3 -c 'import asyncio, websockets, json, logging; from aiohttp import web; logging.basicConfig(level=logging.INFO); logger = logging.getLogger(__name__); connected_clients = set(); exec(\"async def handle_websocket(websocket, path):\\n    logger.info(f\\\"New client connected\\\"); connected_clients.add(websocket)\\n    try:\\n        await websocket.send(json.dumps({\\\"type\\\": \\\"connected\\\", \\\"message\\\": \\\"Connected to ZX Spectrum Emulator Server\\\", \\\"emulator_running\\\": False}))\\n        async for message in websocket:\\n            data = json.loads(message); logger.info(f\\\"Received: {data}\\\")\\n            await websocket.send(json.dumps({\\\"type\\\": \\\"status\\\", \\\"emulator_running\\\": False, \\\"message\\\": \\\"Server connected successfully!\\\"}))\\n    except: pass\\n    finally: connected_clients.discard(websocket)\\n\\nasync def health_check(request): return web.Response(text=\\\"OK\\\", status=200)\\n\\nasync def main():\\n    app = web.Application(); app.router.add_get(\\\"/health\\\", health_check); runner = web.AppRunner(app); await runner.setup(); site = web.TCPSite(runner, \\\"0.0.0.0\\\", 8080); await site.start(); logger.info(\\\"HTTP server started on port 8080\\\"); server = await websockets.serve(handle_websocket, \\\"0.0.0.0\\\", 8765); logger.info(\\\"WebSocket server started on port 8765\\\"); await server.wait_closed()\\n\\nif __name__ == \\\"__main__\\\": asyncio.run(main())\"); '"
      ]
    }
  ]
}

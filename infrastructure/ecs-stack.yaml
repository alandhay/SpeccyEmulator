AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service for ZX Spectrum Emulator Backend'

Parameters:
  Environment:
    Type: String
    Description: 'Environment name'
    Default: 'dev'
    AllowedValues: [dev, staging, prod]
  
  InfrastructureStackName:
    Type: String
    Description: 'Name of the infrastructure CloudFormation stack'
    Default: 'spectrum-emulator-infrastructure'
  
  ImageUri:
    Type: String
    Description: 'Docker image URI'
    Default: 'public.ecr.aws/docker/library/ubuntu:22.04'

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'spectrum-emulator-cluster-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/spectrum-emulator-${Environment}'
      RetentionInDays: 7

  # ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - '${StreamBucket}/*'
                    - StreamBucket:
                        Fn::ImportValue: !Sub '${InfrastructureStackName}-StreamBucket'

  # ECS Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3StreamAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub
                    - '${StreamBucket}'
                    - StreamBucket:
                        Fn::ImportValue: !Sub '${InfrastructureStackName}-StreamBucket'
                  - !Sub
                    - '${StreamBucket}/*'
                    - StreamBucket:
                        Fn::ImportValue: !Sub '${InfrastructureStackName}-StreamBucket'

  # Security Group for ECS Tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId:
        Fn::ImportValue: !Sub '${InfrastructureStackName}-VPCId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8765
          ToPort: 8765
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'spectrum-emulator-ecs-sg-${Environment}'

  # ALB Security Group (imported from infrastructure stack)
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB to ECS communication
      VpcId:
        Fn::ImportValue: !Sub '${InfrastructureStackName}-VPCId'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8765
          ToPort: 8765
          DestinationSecurityGroupId: !Ref ECSSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          DestinationSecurityGroupId: !Ref ECSSecurityGroup

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'spectrum-emulator-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: spectrum-emulator
          Image: !Ref ImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 8765
              Protocol: tcp
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: STREAM_BUCKET
              Value:
                Fn::ImportValue: !Sub '${InfrastructureStackName}-StreamBucket'
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:8765/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub 'spectrum-emulator-service-${Environment}'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub '${InfrastructureStackName}-PublicSubnet1'
            - Fn::ImportValue: !Sub '${InfrastructureStackName}-PublicSubnet2'
      LoadBalancers:
        - ContainerName: spectrum-emulator
          ContainerPort: 8765
          TargetGroupArn:
            Fn::ImportValue: !Sub '${InfrastructureStackName}-WebSocketTargetGroup'
        - ContainerName: spectrum-emulator
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: !Sub '${InfrastructureStackName}-APITargetGroup'
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

  # Auto Scaling Target
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub 'spectrum-emulator-scaling-policy-${Environment}'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

Outputs:
  ECSClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'

  ECSServiceName:
    Description: 'ECS Service Name'
    Value: !Ref ECSService
    Export:
      Name: !Sub '${AWS::StackName}-ECSService'

  TaskDefinitionArn:
    Description: 'ECS Task Definition ARN'
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'

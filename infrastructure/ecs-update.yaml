AWSTemplateFormatVersion: '2010-09-09'
Description: 'Updated ECS Task Definition with Python Server'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
  
  InfrastructureStackName:
    Type: String
    Default: 'spectrum-emulator-infrastructure'

Resources:
  # Updated Task Definition with Python server
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'spectrum-emulator-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub 'spectrum-emulator-ecs-TaskExecutionRole'
      ContainerDefinitions:
        - Name: spectrum-emulator
          Image: python:3.11-slim
          Essential: true
          PortMappings:
            - ContainerPort: 8765
              Protocol: tcp
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: STREAM_BUCKET
              Value:
                Fn::ImportValue: !Sub '${InfrastructureStackName}-StreamBucket'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/spectrum-emulator-${Environment}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Command:
            - /bin/bash
            - -c
            - |
              apt-get update && apt-get install -y curl netcat-openbsd
              pip install websockets aiohttp aiofiles boto3
              
              # Create a simple WebSocket server
              cat > /app/server.py << 'EOF'
              import asyncio
              import websockets
              import json
              import logging
              from aiohttp import web
              
              logging.basicConfig(level=logging.INFO)
              logger = logging.getLogger(__name__)
              
              connected_clients = set()
              
              async def handle_websocket(websocket, path):
                  logger.info(f"New client connected from {websocket.remote_address}")
                  connected_clients.add(websocket)
                  
                  try:
                      await websocket.send(json.dumps({
                          "type": "connected",
                          "message": "Connected to ZX Spectrum Emulator Server",
                          "emulator_running": False
                      }))
                      
                      async for message in websocket:
                          data = json.loads(message)
                          logger.info(f"Received: {data}")
                          
                          # Echo back status
                          await websocket.send(json.dumps({
                              "type": "status",
                              "emulator_running": False,
                              "message": "Server is running but emulator not started yet"
                          }))
                          
                  except websockets.exceptions.ConnectionClosed:
                      logger.info("Client disconnected")
                  finally:
                      connected_clients.discard(websocket)
              
              async def health_check(request):
                  return web.Response(text="OK", status=200)
              
              async def main():
                  # Start HTTP server for health checks
                  app = web.Application()
                  app.router.add_get('/health', health_check)
                  runner = web.AppRunner(app)
                  await runner.setup()
                  site = web.TCPSite(runner, '0.0.0.0', 8080)
                  await site.start()
                  logger.info("HTTP server started on port 8080")
                  
                  # Start WebSocket server
                  server = await websockets.serve(handle_websocket, "0.0.0.0", 8765)
                  logger.info("WebSocket server started on port 8765")
                  
                  await server.wait_closed()
              
              if __name__ == "__main__":
                  asyncio.run(main())
              EOF
              
              python /app/server.py

Outputs:
  TaskDefinitionArn:
    Description: 'Updated Task Definition ARN'
    Value: !Ref TaskDefinition

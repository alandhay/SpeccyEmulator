#!/bin/bash

# AWS Deployment Script for ZX Spectrum Emulator
# Deploys CloudFront distribution with S3 and ALB

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${BLUE}🚀 Deploying ZX Spectrum Emulator to AWS${NC}"

# Configuration
STACK_NAME="spectrum-emulator-infrastructure"
ENVIRONMENT="dev"
REGION="us-east-1"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        --region)
            REGION="$2"
            shift 2
            ;;
        --domain)
            DOMAIN_NAME="$2"
            shift 2
            ;;
        --certificate-arn)
            CERTIFICATE_ARN="$2"
            shift 2
            ;;
        --help)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --environment ENV     Environment name (dev, staging, prod) [default: dev]"
            echo "  --region REGION       AWS region [default: us-east-1]"
            echo "  --domain DOMAIN       Custom domain name (optional)"
            echo "  --certificate-arn ARN ACM certificate ARN (optional)"
            echo "  --help                Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

echo "Environment: $ENVIRONMENT"
echo "Region: $REGION"
echo "Stack Name: $STACK_NAME"

# Check AWS CLI configuration
echo -e "${BLUE}Checking AWS configuration...${NC}"
if ! aws sts get-caller-identity >/dev/null 2>&1; then
    echo -e "${RED}❌ AWS CLI not configured. Please run 'aws configure'${NC}"
    exit 1
fi

ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
echo -e "${GREEN}✅ AWS Account: $ACCOUNT_ID${NC}"

# Build CloudFormation parameters
PARAMETERS="ParameterKey=Environment,ParameterValue=$ENVIRONMENT"

if [ ! -z "$DOMAIN_NAME" ]; then
    PARAMETERS="$PARAMETERS ParameterKey=DomainName,ParameterValue=$DOMAIN_NAME"
fi

if [ ! -z "$CERTIFICATE_ARN" ]; then
    PARAMETERS="$PARAMETERS ParameterKey=CertificateArn,ParameterValue=$CERTIFICATE_ARN"
fi

# Deploy CloudFormation stack
echo -e "${BLUE}Deploying CloudFormation stack...${NC}"
aws cloudformation deploy \
    --template-file "$PROJECT_ROOT/infrastructure/cloudfront-stack.yaml" \
    --stack-name "$STACK_NAME" \
    --parameter-overrides $PARAMETERS \
    --capabilities CAPABILITY_IAM \
    --region "$REGION" \
    --no-fail-on-empty-changeset

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ CloudFormation stack deployed successfully${NC}"
else
    echo -e "${RED}❌ CloudFormation deployment failed${NC}"
    exit 1
fi

# Get stack outputs
echo -e "${BLUE}Getting stack outputs...${NC}"
CLOUDFRONT_DOMAIN=$(aws cloudformation describe-stacks \
    --stack-name "$STACK_NAME" \
    --region "$REGION" \
    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDomainName`].OutputValue' \
    --output text)

WEB_BUCKET=$(aws cloudformation describe-stacks \
    --stack-name "$STACK_NAME" \
    --region "$REGION" \
    --query 'Stacks[0].Outputs[?OutputKey==`WebContentBucketName`].OutputValue' \
    --output text)

STREAM_BUCKET=$(aws cloudformation describe-stacks \
    --stack-name "$STACK_NAME" \
    --region "$REGION" \
    --query 'Stacks[0].Outputs[?OutputKey==`StreamBucketName`].OutputValue' \
    --output text)

ALB_DNS=$(aws cloudformation describe-stacks \
    --stack-name "$STACK_NAME" \
    --region "$REGION" \
    --query 'Stacks[0].Outputs[?OutputKey==`ApplicationLoadBalancerDNS`].OutputValue' \
    --output text)

echo -e "${GREEN}✅ Stack outputs retrieved${NC}"
echo "CloudFront Domain: $CLOUDFRONT_DOMAIN"
echo "Web Bucket: $WEB_BUCKET"
echo "Stream Bucket: $STREAM_BUCKET"
echo "ALB DNS: $ALB_DNS"

# Update web configuration
echo -e "${BLUE}Updating web configuration...${NC}"
cat > "$PROJECT_ROOT/web/js/config.js" << EOF
// AWS Configuration - Auto-generated by deploy script
window.AWS_CONFIG = {
    cloudfront_domain: 'https://$CLOUDFRONT_DOMAIN',
    websocket_url: 'wss://$CLOUDFRONT_DOMAIN/ws',
    api_base_url: 'https://$CLOUDFRONT_DOMAIN/api',
    stream_base_url: 'https://$CLOUDFRONT_DOMAIN/stream',
    environment: '$ENVIRONMENT'
};
EOF

# Update HTML to include config
if ! grep -q "config.js" "$PROJECT_ROOT/web/index.html"; then
    sed -i 's|<script src="js/hls.min.js"></script>|<script src="js/config.js"></script>\n    <script src="js/hls.min.js"></script>|' "$PROJECT_ROOT/web/index.html"
fi

# Deploy web content to S3
echo -e "${BLUE}Deploying web content to S3...${NC}"
aws s3 sync "$PROJECT_ROOT/web/" "s3://$WEB_BUCKET/" \
    --region "$REGION" \
    --delete \
    --cache-control "max-age=86400" \
    --exclude "*.map"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Web content deployed to S3${NC}"
else
    echo -e "${RED}❌ Failed to deploy web content${NC}"
    exit 1
fi

# Create invalidation
echo -e "${BLUE}Creating CloudFront invalidation...${NC}"
DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
    --stack-name "$STACK_NAME" \
    --region "$REGION" \
    --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
    --output text)

aws cloudfront create-invalidation \
    --distribution-id "$DISTRIBUTION_ID" \
    --paths "/*" \
    --region "$REGION" >/dev/null

echo -e "${GREEN}✅ CloudFront invalidation created${NC}"

# Save deployment info
cat > "$PROJECT_ROOT/deployment-info.json" << EOF
{
    "environment": "$ENVIRONMENT",
    "region": "$REGION",
    "stack_name": "$STACK_NAME",
    "cloudfront_domain": "$CLOUDFRONT_DOMAIN",
    "web_bucket": "$WEB_BUCKET",
    "stream_bucket": "$STREAM_BUCKET",
    "alb_dns": "$ALB_DNS",
    "distribution_id": "$DISTRIBUTION_ID",
    "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
}
EOF

echo ""
echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
echo ""
echo -e "${BLUE}Access your emulator at:${NC}"
if [ ! -z "$DOMAIN_NAME" ]; then
    echo "  https://$DOMAIN_NAME"
else
    echo "  https://$CLOUDFRONT_DOMAIN"
fi
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "1. Deploy your backend services to the ALB target groups"
echo "2. Update DNS records if using a custom domain"
echo "3. Test the WebSocket and streaming functionality"
echo ""
echo -e "${YELLOW}Note: CloudFront distribution may take 10-15 minutes to fully deploy${NC}"
